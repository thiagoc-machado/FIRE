version: '3.9'

services:
  backend:
    build:
      context: ./backend
    container_name: fire-backend
    # command: gunicorn config.wsgi:application --bind 0.0.0.0:8000
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    # depends_on:
      # - db

  # db:
  #   image: postgres:15
  #   container_name: fire-db
  #   volumes:
  #     - fire_postgres_data:/var/lib/postgresql/data/
  #   environment:
  #     POSTGRES_DB: ${POSTGRES_DB}
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #   env_file:
  #     - .env

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"  # painel web
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A config worker --loglevel=info
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings
    depends_on:
      # - db
      - rabbitmq

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings
    depends_on:
      # - db
      - rabbitmq

  frontend:
    build:
      context: ./frontend
    ports:
      - '5173:5173'
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    command: npm run dev
volumes:
  fire_postgres_data:
